// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?
  phone          String?  // WhatsApp phone number (legacy)
  telegramChatId String?  // Telegram Chat ID
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  holdings             Holding[]
  watchlist            Watchlist[]
  notificationSettings NotificationSettings?

  @@map("users")
}

// User notification preferences
model NotificationSettings {
  id     String @id @default(cuid())
  userId String @unique

  // Notification mode: calm, balanced, active
  mode String @default("balanced")

  // Delivery channels
  inApp    Boolean @default(true)
  telegram Boolean @default(false)
  email    Boolean @default(true)

  // Topics to track
  news             Boolean @default(true)
  reddit           Boolean @default(true)
  expertOpinions   Boolean @default(false)
  friendActivity   Boolean @default(true)
  portfolioAlerts  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

// Stocks the user owns
model Holding {
  id           String   @id @default(cuid())
  userId       String
  symbol       String
  name         String
  shares       Float
  avgPrice     Float    // Average purchase price
  purchaseDate DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol])
  @@map("holdings")
}

// Stocks the user is watching
model Watchlist {
  id        String   @id @default(cuid())
  userId    String
  symbol    String
  name      String
  addedAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol])
  @@map("watchlist")
}

// Cache for stock prices (to avoid excessive API calls)
model StockPrice {
  id               String   @id @default(cuid())
  symbol           String   @unique
  name             String
  currentPrice     Float
  previousClose    Float
  dayChange        Float
  dayChangePercent Float
  volume           String?
  marketCap        String?
  lastUpdated      DateTime @default(now())

  @@map("stock_prices")
}

// Trending stocks with social sentiment
model TrendingStock {
  id               String   @id @default(cuid())
  symbol           String   @unique
  name             String
  sentiment        String   // positive, negative, neutral
  vibe             String   // "On fire", "Steady climb", etc.
  redditMentions   Int
  redditBenchmark  Int      // Average mentions for comparison
  momentum         String   // "Strong", "Building", "Fading"
  friendsWatching  Int
  lastUpdated      DateTime @default(now())

  @@map("trending_stocks")
}
